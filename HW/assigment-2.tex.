\documentclass[11pt]{article}

\newcommand{\yourname}{}

\def\comments{0}

%format and packages

%\usepackage{algorithm, algorithmic}

\usepackage{epsfig, graphicx}
\usepackage[noend]{algpseudocode}
\usepackage{amsmath, amssymb, amsthm}
\usepackage{enumerate}
\usepackage{enumitem}
\usepackage{framed}
\usepackage{verbatim}
\usepackage[margin=1.1in]{geometry}
\usepackage{microtype}
\usepackage{kpfonts}
\usepackage{palatino}
	\DeclareMathAlphabet{\mathtt}{OT1}{cmtt}{m}{n}
	\SetMathAlphabet{\mathtt}{bold}{OT1}{cmtt}{bx}{n}
	\DeclareMathAlphabet{\mathsf}{OT1}{cmss}{m}{n}
	\SetMathAlphabet{\mathsf}{bold}{OT1}{cmss}{bx}{n}
	\renewcommand*\ttdefault{cmtt}
	\renewcommand*\sfdefault{cmss}
	\renewcommand{\baselinestretch}{1.05}
\usepackage[usenames,dvipsnames]{xcolor}
\definecolor{DarkGreen}{rgb}{0.15,0.5,0.15}
\definecolor{DarkRed}{rgb}{0.6,0.2,0.2}
\definecolor{DarkBlue}{rgb}{0.2,0.2,0.6}
\definecolor{DarkPurple}{rgb}{0.4,0.2,0.4}
\usepackage[pdftex]{hyperref}
\hypersetup{
	linktocpage=true,
	colorlinks=true,				% false: boxed links; true: colored links
	linkcolor=DarkBlue,		% color of internal links
	citecolor=DarkBlue,	% color of links to bibliography
	urlcolor=DarkBlue,		% color of external links
}

\usepackage[boxruled,vlined,nofillcomment]{algorithm2e}
	\SetKwProg{Fn}{Function}{\string:}{}
	\SetKwFor{While}{While}{}{}
	\SetKwFor{For}{For}{}{}
	\SetKwIF{If}{ElseIf}{Else}{If}{:}{ElseIf}{Else}{:}
	\SetKw{Return}{Return}
	

%enclosure macros
\newcommand{\paren}[1]{\ensuremath{\left( {#1} \right)}}
\newcommand{\bracket}[1]{\ensuremath{\left\{ {#1} \right\}}}
\renewcommand{\sb}[1]{\ensuremath{\left[ {#1} \right\]}}
\newcommand{\ab}[1]{\ensuremath{\left\langle {#1} \right\rangle}}

%probability macros
\newcommand{\ex}[2]{{\ifx&#1& \mathbb{E} \else \underset{#1}{\mathbb{E}} \fi \left[#2\right]}}
\newcommand{\pr}[2]{{\ifx&#1& \mathbb{P} \else \underset{#1}{\mathbb{P}} \fi \left[#2\right]}}
\newcommand{\var}[2]{{\ifx&#1& \mathrm{Var} \else \underset{#1}{\mathrm{Var}} \fi \left[#2\right]}}

%useful CS macros
\newcommand{\poly}{\mathrm{poly}}
\newcommand{\polylog}{\mathrm{polylog}}
\newcommand{\zo}{\{0,1\}}
\newcommand{\pmo}{\{\pm1\}}
\newcommand{\getsr}{\gets_{\mbox{\tiny R}}}
\newcommand{\card}[1]{\left| #1 \right|}
\newcommand{\set}[1]{\left\{#1\right\}}
\newcommand{\negl}{\mathrm{negl}}
\newcommand{\eps}{\varepsilon}
\DeclareMathOperator*{\argmin}{arg\,min}
\DeclareMathOperator*{\argmax}{arg\,max}
\newcommand{\eqand}{\qquad \textrm{and} \qquad}
\newcommand{\ind}[1]{\mathbb{I}\{#1\}}
\newcommand{\sslash}{\ensuremath{\mathbin{/\mkern-3mu/}}}

%info theory macros
\newcommand{\SD}{\mathit{SD}}
\newcommand{\sd}[2]{\SD\left( #1 , #2 \right)}
\newcommand{\KL}{\mathit{KL}}
\newcommand{\kl}[2]{\KL\left(#1 \| #2 \right)}
\newcommand{\CS}{\ensuremath{\chi^2}}
\newcommand{\cs}[2]{\CS\left(#1 \| #2 \right)}
\newcommand{\MI}{\mathit{I}}
\newcommand{\mi}[2]{\MI\left(~#1~;~#2~\right)}

%mathbb
\newcommand{\N}{\mathbb{N}}
\newcommand{\R}{\mathbb{R}}
\newcommand{\Z}{\mathbb{Z}}
%mathcal
\newcommand{\cA}{\mathcal{A}}
\newcommand{\cB}{\mathcal{B}}
\newcommand{\cC}{\mathcal{C}}
\newcommand{\cD}{\mathcal{D}}
\newcommand{\cE}{\mathcal{E}}
\newcommand{\cF}{\mathcal{F}}
\newcommand{\cL}{\mathcal{L}}
\newcommand{\cM}{\mathcal{M}}
\newcommand{\cO}{\mathcal{O}}
\newcommand{\cP}{\mathcal{P}}
\newcommand{\cQ}{\mathcal{Q}}
\newcommand{\cR}{\mathcal{R}}
\newcommand{\cS}{\mathcal{S}}
\newcommand{\cU}{\mathcal{U}}
\newcommand{\cV}{\mathcal{V}}
\newcommand{\cW}{\mathcal{W}}
\newcommand{\cX}{\mathcal{X}}
\newcommand{\cY}{\mathcal{Y}}
\newcommand{\cZ}{\mathcal{Z}}

%theorem macros
\newtheorem{thm}{Theorem}
\newtheorem{lem}[thm]{Lemma}
\newtheorem{fact}[thm]{Fact}
\newtheorem{clm}[thm]{Claim}
\newtheorem{rem}[thm]{Remark}
\newtheorem{coro}[thm]{Corollary}
\newtheorem{prop}[thm]{Proposition}
\newtheorem{conj}[thm]{Conjecture}
	\theoremstyle{definition}
\newtheorem{defn}[thm]{Definition}

\theoremstyle{theorem}
\newtheorem{prob}{Problem}


\newcommand{\course}{CS 3000: Algorithms \& Data}
\newcommand{\semester}{Spring 2022}

\newcommand{\psnum}{2}

\definecolor{cit}{rgb}{0.05,0.2,0.45} 

\begin{document}
{\Large 
\begin{center} \course\ --- \semester\ \end{center}}
{\large
\vspace{10pt}
\noindent Assignment ~\psnum}

\bigskip
{\large
\noindent Name: Jakob Brattke \yourname \vspace{2pt}\\ 
}
\vspace{15pt}
\begin{itemize}

\item Make sure to put your name on the first page.  If you are using the \LaTeX~template we provided, then you can make sure it appears by filling in the \texttt{yourname} command.

\item Solutions must be typeset in \LaTeX.  If you need to draw any diagrams, you may draw them by hand as long as they are embedded in the PDF.  We recommend using the source file for this assignment to get started.

\item Please review the academic integrity guidelines for assignments in the syllabus.

\item Finding solutions to homework problems on the web, or by asking
  students not enrolled in the class is strictly forbidden.

\end{itemize}
\newpage

%%%%%%%%%%%%PROBLEM 1 
\begin{prob}
(5+5+5+5=20 points) Recurrence relations
\end{prob}
  \label{prob:recurrences}
Solve the following recurrence relations. You may use any method from lecture (guess-and-prove-by-induction, repeated substitution, recursion tree or Master theorem). If using recursion tree, you may scan a hand-drawn recursion tree. If using Master theorem, you must clearly identify the applicable case.

\begin{enumerate}
    \item{$T(n) = 2T\left(\frac{n}{2}\right) + n^2$}
    \item{$T(n) = 4T\left(\frac{n}{2}\right) + n^2\log n$}
    \item{$T(n) = T(n-1)  + \log n$}
    \item{$T(n) = 5T\left(\frac{n}{4}\right) + n^\frac{1}{3}$}

\end{enumerate}


    
%%%%%%%%%%%%PROBLEM 2 
\begin{prob}
  \label{prob:even-odd-pairs}
  Pairing up
\end{prob}
  
You are provided with an array of distinct positive integer numbers. An EO-pair of numbers is $(a,b)$ such that $a$ and $b$ are both in the array, $a$ is even and $b$ is odd, and $b$ occurs after $a$ in the array. Devise an efficient divide-and-conquer algorithm to compute the number of possible EO-pairs in the given array that is better than simply checking all pairs. Your answer must include the pseudocode for the algorithm, a justification for why it works correctly and an analysis in space and time.

\begin{algorithm}[H]
\Fn{$findEoPairs(arr, l, r$)}{
  int $pairs, unPairedOdd, unPairedEven \leftarrow 0$ \\
  int $mid \leftarrow int(\frac{l+r}{2})$ \\
  $B.C:$\If {$l \leq r$} {
    \If {$arr[l] \% 2 == 0$} {$unPairedEven \leftarrow 1$}
     \If {$arr[l] \% 2 == 1$} {$unPairedOdd \leftarrow 1$}
  }
  $(x,y,z) \leftarrow findEoPairs(arr, l, mid)$ \\
  $(u,t,v) \leftarrow findEoPairs(arr, mid+1, r)$ \\
  
  \Return $(x+u+min(y,v), y+t-min(y,v), z+v-min(y,v))$
}
\end{algorithm}

\noindent \textbf{Space Analysis:} A constant space is stored for each call of the program, this means the algorithm has space complexity of O(n) \\
\textbf{Time Analysis:} Each element of the array is only visited once, therefore the time complexity is O(n) \\

%%%%%%%%%%%%PROBLEM 3 
\begin{prob}
  \label{prob:powers}
The power game
\end{prob}
  
(10 points) Provide an $O(\log n)$ algorithm to compute the function $a^n$ for a given constant $a$ and an integer $n\geq 0$. $a$ may be positive or negative, and may not be an integer.

Your answer must include pseudocode for the algorithm, a proof of correctness and an analysis in space and time.

\begin{algorithm}[H]
\Fn{$pow(a,n$)}{
  $B.C:$\If {$n = 0$} {
    \Return 1
  }
  $halfSum = pow(a, int(\frac{n}{2})$ \\
  \If {$arr[l] \% 2 == 0$} {\Return $halfSum * halfSum$}
  \Else {\Return $halfSum * halfSum * a$}
}
\end{algorithm}
\noindent \textbf{Space Analysis:} Space complexity for this algorithm is O(1) \\
\textbf{Time Analysis:} Time complexity is O(log(n)) \\


%%%%% PROBLEM 4
\begin{prob}
(2 + 5 + 8 + 5 = 20 points)  Landing the slides at SlideWorld
\end{prob}

\noindent
You have won a contract for the design of a new theme park, SlideWorld.  The primary attraction of the park is to consist of $n$ landings, numbered $1$ through $n$, which will be connected by a number of {\em slides}. Each slide $(i \to j)$ connects a landing $i$ to a landing $j > i$, which means that slide $(i \to j)$ goes from landing $i$ \emph{directly} to landing $j$.  See below for an example of the possible slides when $n=3$.

\begin{center}
\includegraphics[width=0.2\textwidth,keepaspectratio=true]{pics/slides-illustration.png}
\end{center}

Slideworld wants to let the customers begin their trip at any landing $b$ and end at any other landing $e > b$. Putting in all the $\binom{n}{2}$ slides in the park is going to break the bank. So you have been asked to determine a set of slides so that any customer can get from {\em any landing}\/ $b$ to {\em any landing}\/ $e > b$ using {\em at most two slides}. That is, it should be possible to get from any $b$ to any $e > b$ either by taking a direct slide $(b \to e)$ or by taking two slides $(b \to m)$ and $(m \to e)$. A solution to your algorithm is a set of slides.

Using divide-and-conquer, we will find a solution that uses only $\Theta(n \log n)$ slides while ensuring that any customer can get from any landing $b$ to any landing $e > b$ using at most two slides. 

\begin{enumerate}[label=(\alph*)]
\item[{\bf (a)}]{For the base cases $n=1,2$ design a system using at most $1$ slide.}
\item[{\bf (b)}]{For $n>2$ we will use divide-and-conquer. Assume that we already put in place slides connecting the first $\lfloor n/2 \rfloor$ landings and slides connecting the last $\lceil n/2 \rceil$ landings so that if $i$ and $j$ both belong to the same half, we can get from $i$ to $j$ in at most $2$ slides. Show how to add $\Theta(n)$ additional slides so that if $i$ is in the first half and $j$ is in the second half we can get from $i$ to $j$ using only two slides.}
\item[{\bf (c)}]{Using part (b), write (in pseudocode) a divide-and-conquer algorithm that takes as input the number of landings $n$ and outputs the list of all the slides used by your attraction.}
\item[{\bf (d)}]{Write the recurrence for the number of slides your solution uses and solve it.  You may use any method to solve the recurrence relation.}
\end{enumerate}

\end{document}
